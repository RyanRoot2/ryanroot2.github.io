{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#about-me","title":"About Me","text":""},{"location":"#professional-overview","title":"Professional Overview","text":"<p>I am an all-round tech enthusiast with career experience in data, a degree in mathematics, and strong proficiency in Excel and Python. I am passionate about the theory behind data science and the mathematics that underpin machine learning. My journey in data analysis is driven by the satisfaction of uncovering meaningful stories within data that lead to actionable insights and impactful recommendations.</p>"},{"location":"#current-certification-pursuits","title":"Current Certification Pursuits","text":"<ul> <li>SQL (In Progress)</li> <li>Power BI (In Progress)</li> <li>Machine Learning (In Progress)</li> <li>Networking (Unstarted)</li> <li>Azure (Unstarted)</li> </ul>"},{"location":"#personal-interests","title":"Personal Interests","text":"<ul> <li>Technology: Networking, hash algorithms, and encryption - particularly how they play a role in cybersecurity.</li> <li>Personal Finance: Optimizing my finances and building tools for budgeting and pension planning.</li> <li>Strategic Games: Anything that rewards thinking as many steps ahead as possible and making decisions based on probability.</li> <li>Strength Training: Practical programming for strength, including implementing the most recent scientific findings.</li> </ul>"},{"location":"#final-thoughts","title":"Final Thoughts","text":"<p>In my spare time, I enjoy learning about various areas of technology, integrating them into a cohesive understanding of how different components function together. This holistic view, while not necessarily tied to a specific career path, fuels my passion for learning and discovery. How does passing an electric current through a piece of metal display this on your screen?</p> <p>Thank you for visiting. Feel free to explore my projects and connect with me to discuss potential collaborations or opportunities.</p>"},{"location":"resume/","title":"About Me","text":"<p>Hello</p>"},{"location":"resume/#subheading","title":"Subheading","text":"<p>A sentence.</p>"},{"location":"resume/#section-2","title":"Section 2","text":"<p>Another sentence.</p>"},{"location":"resume/#subsubheader3","title":"SubSubheader3","text":""},{"location":"resume/#sub-3","title":"Sub 3","text":"<p>Text</p>"},{"location":"resume/#subsub","title":"Subsub","text":"<p>Text</p>"},{"location":"learning-log/","title":"Index","text":"<p>Text</p>"},{"location":"learning-log/encryption/","title":"Encryption","text":"<p>Encryption</p>"},{"location":"learning-log/hash-algorithms/","title":"Hash Algorithms","text":""},{"location":"learning-log/hash-algorithms/#introduction","title":"Introduction","text":""},{"location":"learning-log/hash-algorithms/#what-is-a-hash-function","title":"What is a hash function?","text":"<p>A hash function, or hash algorithm, is a function that converts an input into a string of bytes, which is often expressed using hexidecimal. The result is pseudo-random (seemingly random) and is typically referred to as the hash value.</p> <p>Hash functions are commonly used for purposes such as data integrity verification (making sure nothing has changed), storing passwords, and digital signatures.</p> <p>It's important to note that hash functions are one-way, it's impossible to get the input back from the output.</p> <p>Hash functions have three main properties:</p> <ul> <li>Deterministic - the same input always gives the same hash value</li> <li>Efficient - they are fast to compute</li> <li>Avalanche Effect - a small change to the input produces a significantly different output</li> </ul>"},{"location":"learning-log/hash-algorithms/#use-case-storing-a-password","title":"Use case: storing a password","text":"<p>When a user registers for an account, they create a password. Instead of storing that password, the application will use a hash function to generate a hash value of the password which is stored instead.</p> <p>When a user tries to log in, whatever password they enter will be input into the same hash function and the resultant hash value can be compared to the one stored in the database.</p> <p>Because of determinism, we can say that if the hash values are the same, the password has been entered correctly.</p>"},{"location":"learning-log/hash-algorithms/#an-example-of-a-bad-hash-function","title":"An example of a (bad) hash function","text":"<p>Suppose I create an account using the following password: P7v8kX2a  One way to create a hash value of this is to take the ASCII values for each character and add them up.</p> <p>Here is how this can be done in Python:</p> <pre><code># Define the password\npassword = \"P7v8kX2a\"\n\n# Generate the ASCII values for each character in the password\nascii_values = [ord(char) for char in password]\n\n# Calculate the sum of the ASCII values\nascii_sum = sum(ascii_values)\n\n# Output the ASCII values and the sum\nascii_values, ascii_sum\n</code></pre> <p>This will return the following values: <pre><code>ASCII values: [80, 55, 118, 56, 107, 88, 50, 97]\nASCII sum: 651\n</code></pre></p> <p>In this case, the value stored in the database would be 651 instead of the password.</p> <p>There are a few reasons this is a bad hash function:</p> <ol> <li>Not Unique     Many combinations of numbers add up to 651 - that means somebody could enter an incorrect password     and be granted access to the account. Likewise \"ABC\" and \"CBA\" would have the same hash value.     Another way of saying this would be to say that the set of possible sums is smaller than the set of possible passwords. 6 = 5+1, 6 = 4+2, 6 = 3+3, etc.</li> <li>Deterministic and Predictable     Given a hash value, an attacker could easily reverse-engineer possible combinations of characters that result in that sum. This makes the function vulnerable to brute force attacks.</li> <li>No Avalanche Effect     A change to the input does not provide a significant change to the output. In fact, changing the letter \"A\" to the letter \"B\" in the input would     simply increase the ASCII sum by 1.</li> <li>Brute Force Vulnerability     Summing ASCII values is extremely fast and trivial to compute. This allows attackers to generate and compare possible sums almost instantly, drastically reducing the time needed for a brute-force attack. Moreover, the hash value itself can start to reveal information about the password. At the most trivial level, if the ASCII sum is greater than 1 then the password can't simply be 'A'. If the ASCII sum is greater than 127 (the maximum ASCII value), the password must be at least two characters in length.</li> </ol>"},{"location":"python/","title":"Index","text":"<p>Text</p>"},{"location":"python/spotify/","title":"Spotify","text":"<p>Spotify</p>"}]}